module Main where

-- Parametric Shape type with record syntax
data Shape a = Circle
    { radius :: Float
    , color :: a
    }
    | Rectangle
    { width :: Float
    , height :: Float
    , color :: a
    }
    deriving (Show, Eq)

-- Example shapes with different color types
redCircle :: Shape String
redCircle = Circle { radius = 5.0, color = "red" }

blueRectangle :: Shape String
blueRectangle = Rectangle { width = 4.0, height = 6.0, color = "blue" }

rgbCircle :: Shape (Int, Int, Int)
rgbCircle = Circle { radius = 3.0, color = (255, 0, 0) }  -- RGB red

main :: IO ()
main = do
    putStrLn "Example Shapes:"
    print redCircle
    print blueRectangle
    print rgbCircle
    
    putStrLn "\nAccessing fields:"
    putStrLn $ "Circle color: " ++ show (color redCircle)
    putStrLn $ "Rectangle area: " ++ show (width blueRectangle * height blueRectangle)
