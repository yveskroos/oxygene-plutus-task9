module Main where

-- Binary Search Tree definition
data BST a = EmptyBST                     
           | NodeBST a (BST a) (BST a)    
           deriving (Show, Eq)

-- Example BST
exampleBST :: BST Int
exampleBST = 
    NodeBST 5
        (NodeBST 3
            (NodeBST 1 EmptyBST EmptyBST)
            (NodeBST 4 EmptyBST EmptyBST))
        (NodeBST 8
            (NodeBST 7 EmptyBST EmptyBST)
            (NodeBST 9 EmptyBST EmptyBST))

-- Insert into BST
insert :: (Ord a) => a -> BST a -> BST a
insert x EmptyBST = NodeBST x EmptyBST EmptyBST
insert x (NodeBST y left right)
    | x < y     = NodeBST y (insert x left) right
    | x > y     = NodeBST y left (insert x right)
    | otherwise = NodeBST y left right  -- x == y, no duplicate

-- Check if value exists in BST
search :: (Ord a) => a -> BST a -> Bool
search _ EmptyBST = False
search x (NodeBST y left right)
    | x == y    = True
    | x < y     = search x left
    | otherwise = search x right

main :: IO ()
main = do
    putStrLn "Example BST:"
    print exampleBST
    
    putStrLn "\nBST Operations:"
    putStrLn $ "Search for 7: " ++ show (search 7 exampleBST)  
    putStrLn $ "Search for 2: " ++ show (search 2 exampleBST)  
    
    let newBST = insert 6 exampleBST
    putStrLn "\nAfter inserting 6:"
    print newBST
